## Classes et objets

### Objets

Des objets sont des variables contenant : 
- des propriétés
- des méthodes (équivalentes à des fonctions)

Leur principale intérêt est de regrouper au sein d'une même instance (=variable de type objet) plusieurs sous-propriétés et plusieurs méthodes, évitant ainsi la multiplication des noms de variables globales et l'"éparpillement" du code.

### Classes

Les classes sont l'"usine" ou le "gabarit" permettant de créer des objets similaires.
Elles permettent de donner un type à un objet et ainsi de pouvoir identifier que 2 objets (instances) ont les mêmes caractéristiques, même si ces instances peuvent avoir un état bien distinct.

Lorsqu'on définit une classe, on implémente des propriétés et des méthodes.
Les propriétés peuvent être de type primitif (int, bool ...) ou être elles-mêmes des objets, appartenant à une classe ...

Propriétés + méthodes = MEMBRES


### Quelles technos ?
De nombreux langages intègrent le concept de classe : Java, C#, php, python, Askell ...

! Même si Javascript intègre le mot-clé "class" depuis sa version ES6, il ne peut pas être considéré commme un langage orienté objet. 

Derrière le mot-clé class, il n’y a pas de vraie “classe” : c’est juste une couche de syntaxe (syntactic sugar) qui repose toujours sur les prototypes.


function Voiture(marque, couleur) {
  this.marque = marque;
  this.couleur = couleur;
}

Voiture.prototype.demarrer = function() {
  console.log(this.marque + " démarre !");
};

const maVoiture = new Voiture("Renault", "rouge");
maVoiture.demarrer(); // "Renault démarre !"


Depuis ES6 :

class Voiture {
  constructor(marque, couleur) {
    this.marque = marque;
    this.couleur = couleur;
  }

  demarrer() {
    console.log(this.marque + " démarre !");
  }
}

const maVoiture = new Voiture("Renault", "rouge");
maVoiture.demarrer();

### Instanciation

C'est la routine permettant de créer un nouvel objet à partir d'une classe.
On parle de constructeur.

Un constructeur est une méthode spéciale, appelée de façon implicite lorsqu'on instancie un nouvel objet.
Un constructeur peut contenir un ou plusieurs paramètres.

### Exemples simples en java

// Définition de la classe
class Voiture {
    String marque;
    String couleur;

    // Constructeur
    Voiture(String marque, String couleur) {
        this.marque = marque;
        this.couleur = couleur;
    }

    void afficherInfos() {
        System.out.println("Marque: " + marque + ", Couleur: " + couleur);
    }
}

// Utilisation
public class Main {
    public static void main(String[] args) {
        Voiture v1 = new Voiture("Renault", "Rouge");
        Voiture v2 = new Voiture("Peugeot", "Bleu");

        v1.afficherInfos();
        v2.afficherInfos();
    }
}

### Exemple simple en C#

using System;

class Voiture {
    public string Marque { get; set; }
    public string Couleur { get; set; }

    // Constructeur
    public Voiture(string marque, string couleur) {
        Marque = marque;
        Couleur = couleur;
    }

    public void AfficherInfos() {
        Console.WriteLine("Marque: " + Marque + ", Couleur: " + Couleur);
    }
}

// Utilisation
class Program {
    static void Main() {
        Voiture v1 = new Voiture("Renault", "Rouge");
        Voiture v2 = new Voiture("Peugeot", "Bleu");

        v1.AfficherInfos();
        v2.AfficherInfos();
    }
}

### Exemple en PHP

<?php
class Voiture {
    public $marque;
    public $couleur;

    // Constructeur
    public function __construct($marque, $couleur) {
        $this->marque = $marque;
        $this->couleur = $couleur;
    }

    public function afficherInfos() {
        echo "Marque: {$this->marque}, Couleur: {$this->couleur}\n";
    }
}

// Utilisation
$v1 = new Voiture("Renault", "Rouge");
$v2 = new Voiture("Peugeot", "Bleu");

$v1->afficherInfos();
$v2->afficherInfos();
?>


### Mise en pratique

Installer les environnements nécessaires sur vos postes et instancier des objets commme dans les exemples donnés 


### Méthodes et propriétés de classe

Nous avons vu que les méthodes et propriétés sont définies au niveau des classes, et qu'elles sont utilisées sur leurs instances

MaClasse monObjet = new MaClasse();
monObjet.methode1();
...

Mais dans certains cas, propriétés et méthodes peuvent être définies au niveau de la classe elle-même.
On parle de membres statiques.

A quoi ca sert ?
=> Ne pas avoir besoin d'instancier un nouvel objet avant de lancer une procédure.
=> On se rapproche alors d'un développement orienté module.

Exemple en java 

class Compteur {
    // Attribut statique (partagé entre toutes les instances)
    static int nbInstances = 0;

    // Constructeur
    Compteur() {
        nbInstances++;
    }

    // Méthode statique
    static void afficherNbInstances() {
        System.out.println("Nombre d'instances créées : " + nbInstances);
    }
}

public class Main {
    public static void main(String[] args) {
        Compteur c1 = new Compteur();
        Compteur c2 = new Compteur();

        Compteur.afficherNbInstances(); // "Nombre d'instances créées : 2"
    }
}


Exemple en python

class Compteur:
    # Variable de classe (partagée)
    nb_instances = 0

    def __init__(self):
        Compteur.nb_instances += 1

    @staticmethod
    def afficher_nb_instances():
        print(f"Nombre d'instances créées : {Compteur.nb_instances}")

# Utilisation
c1 = Compteur()
c2 = Compteur()

Compteur.afficher_nb_instances()  # "Nombre d'instances créées : 2"

Exemple en php

<?php
class Compteur {
    // Attribut statique
    public static $nbInstances = 0;

    // Constructeur
    public function __construct() {
        self::$nbInstances++;
    }

    // Méthode statique
    public static function afficherNbInstances() {
        echo "Nombre d'instances créées : " . self::$nbInstances . "\n";
    }
}

// Utilisation
$c1 = new Compteur();
$c2 = new Compteur();

Compteur::afficherNbInstances(); // "Nombre d'instances créées : 2"
?>


