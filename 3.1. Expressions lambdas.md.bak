## 3.1. Expressions lambda

Une expression lambda ou "fonction fléchée" est une définition rapide, anonyme d'une fonction acceptant un certain nombre de paramètres et renvoyant une valeur.

### Implémentation en Javascript

function carre(nombre){
   return nombre * nombre;
}

équivaut à ...

const carre = (nb) => nb * nb ;

### Implémentation en Python

def carre(nombre):
   return nombre * nombre


équivaut à ...

carre = lambda nb: nb * nb

### Implémentation en Java 

List<String> mots = Arrays.asList("pomme", "banane", "kiwi", "cerise", "abricot");

// Tri alphabétique avec lambda
Collections.sort(mots, (a, b) -> a.compareTo(b));

// Tri par longueur avec lambda
Collections.sort(mots, (a, b) -> a.length() - b.length() );

A NOTER : En java, l'expression lambda doit "matcher" en terme de signature avec une méthode du type attendu.

Explication :

La signature de Collections.sort est :
static <T> void Collections.sort<T>(List<T> , Comparator<? extends T>)

=> la méthode attend une liste de T (T = type quelconque)
=> elle attend aussi un Comparateur (Comparator) de ce même type T
... C'est à dire un objet capable de comparer deux objets de meme type T et de dire lequel doit être placé avant l'autre

... si on regarde maintenant Comparator<T>, on voit que c'est une interface générique qui possède une méthode 

int compare(T o1, T o2)

Donc, on aurait pu écrire ceci : 

Comparator<String> comparator = new Comparator<>{
   public int compare(String o1, String o2){
	return a.length() - b.length();
	}
}
	
Collections.sort(mots, ccomparator);

Mais on peut simplifier cela en :

Collections.sort(mots, (a, b) -> a.length() - b.length() );


### Utilisation et limites

- Les lambdas sont utiles pour alléger le code (ne pas définir toute une fonction - voire tout une classe anonyme en java)

- Elles sont souvent utilisées en tant que paramètre dans des fonctions / méthodes natives du langage pour des opérations de 
- tri
- filtrage
- map
- consommation (forEach)
- recherche d'oocurrence (some, all)


### Cas particulier du Javascript

En javascript, l'objet this désigne l'objet courant, dans lequel le code s'éxécute

Lorsqu'on définit une fonction, le this désigne l'objet qui execute la fonction.
Il peut s'agir de l'objet window...

Lorsqu'on utilise le mot-clé this au sein d'une lambda, this désigne l'objet courant dans lequel on a défini la lambda


Exemple :

function Personne(prenom) {
  this.prenom = prenom;

  this.afficherNomClassique = function () {
    setTimeout(function () {
      console.log("Fonction classique :", this.prenom);
    }, 1000);
  };

  this.afficherNomLambda = function () {
    setTimeout(() => {
      console.log("Lambda :", this.prenom);
    }, 1000);
  };
}

const alice = new Personne("Alice");
alice.afficherNomClassique();
alice.afficherNomLambda();