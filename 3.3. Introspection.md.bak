## 3.3. Introspection

### Définition

C'est la capacité d’un programme à examiner sa propre structure à l’exécution.
Autrement dit : un objet peut se décrire lui-même (type, méthodes, attributs…) sans qu’on ait besoin de tout connaître au moment de l’écriture du code.
C’est une forme de réflexion (reflection en anglais).

### Pourquoi utiliser l’introspection ?

Debugging : afficher dynamiquement les propriétés d’un objet.
Frameworks / ORM : découvrir les classes et leurs champs pour générer du code (ex : Hibernate, Django ORM).
Sérialisation : convertir automatiquement un objet en JSON/XML.
Tests unitaires : vérifier dynamiquement si une méthode existe.

### Exemple En Python

class Personne:
    def __init__(self, nom, age):
        self.nom = nom
        self.age = age

    def parler(self):
        print(f"Je m'appelle {self.nom}")

p = Personne("Alice", 25)

print(type(p))             # <class '__main__.Personne'>
print(dir(p))              # liste des attributs et méthodes
print(hasattr(p, "nom"))   # True
print(getattr(p, "nom"))   # "Alice"
print(callable(p.parler))  # True

### En Java

Java fournit l’API Reflection dans java.lang.reflect.

import java.lang.reflect.*;

class Personne {
    private String nom;
    public int age;

    public Personne(String nom, int age) {
        this.nom = nom;
        this.age = age;
    }

    public void parler() {
        System.out.println("Je m'appelle " + nom);
    }
}

public class TestIntrospection {
    public static void main(String[] args) throws Exception {
        Personne p = new Personne("Alice", 25);

        Class<?> c = p.getClass();
        System.out.println("Nom de la classe : " + c.getName());

        // Attributs
        for (Field f : c.getDeclaredFields()) {
            System.out.println("Attribut : " + f.getName());
        }

        // Méthodes
        for (Method m : c.getDeclaredMethods()) {
            System.out.println("Méthode : " + m.getName());
        }
    }
}

### En PHP

PHP propose aussi des fonctions et des classes pour l’introspection :

<?php
class Personne {
    private $nom;
    public $age;

    public function __construct($nom, $age) {
        $this->nom = $nom;
        $this->age = $age;
    }

    public function parler() {
        echo "Je m'appelle $this->nom\n";
    }
}

$p = new Personne("Alice", 25);

echo get_class($p);               // "Personne"
print_r(get_object_vars($p));     // affiche les propriétés accessibles
print_r(get_class_methods($p));   // affiche les méthodes

// Avec Reflection API
$ref = new ReflectionClass("Personne");
print_r($ref->getProperties());
print_r($ref->getMethods());
?>


### Mise en pratique


==> On utiliser le langage Java (obligatoire)
Créer une classe CoffreFort ayant :
- une propriété PRIVEE "tresor" de type String ayant une valeur initiale à "$$$"
- une propriété PRIVEE "cleSecrete" de type String et ayant pour valeur initiale "BLABLA"
- une méthode PRIVEE "String ouvrirEtVider(String cle)" qui, si la clé passée en paramètre est = à la clé secrète, renvoie la valeur du trésor et passe sa valeur à ""

Dans une autre classe contenant uune méthode main, instancier un objet CoffreFort, récupérer la clé secrète et l'utiliser pour appeler la méthode ouvrirEtVider.

Tip : Vous devez au préalable, par introspection, changer les modes d'accès aux méthodes et propriétés voulues